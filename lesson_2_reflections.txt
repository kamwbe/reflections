What happens when you initialize a repository? Why do you need to do it?
  It creates a .git directory and any files are listed as untracked.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
  It's where the files to be committed are kept, whereas the working directory has
  all of the files and the repository has the commits that have been made.

How can you use the staging area to make sure you have one commit per logical
change?
  do:
  1.) git diff --staging
    and
  2.) git diff
  This will show you the changes between what has been committed 1.) and what is
  in staging, and the difference between what is in the work area and what
  is in staging 2.)

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  The is some feature that you are not sure would work out so you play around
  with it on a branch rather than working on the main trunk of development.

How do the diagrams help you visualize the branch structure?
  Diagrams make things visual which is in itself a big aid to understanding
  a stucture.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
  It incorporates the changes on a branch with the changes on a master.  If there
  were no changes on the master you would just rename the branch the master.  But
  if there are you run a merge of the branch with the master and then delete
  the branch label.  The reason you can delete the branch label is because after
  the merge all of the commits on both the master and the branch are reachable 
  from the master.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

